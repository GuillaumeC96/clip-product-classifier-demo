#!/usr/bin/env python3
"""
Script pour analyser les diff√©rences entre le notebook d'entra√Ænement et l'application cloud
"""

import pandas as pd
import numpy as np
import re
from collections import Counter
import os

def analyze_notebook_vs_cloud():
    """Analyser les diff√©rences entre le notebook et l'application cloud"""
    
    print("üîç ANALYSE DES DIFF√âRENCES NOTEBOOK vs CLOUD")
    print("=" * 50)
    
    # 1. Diff√©rences dans l'extraction des mots-cl√©s
    print("\nüìù 1. EXTRACTION DES MOTS-CL√âS")
    print("-" * 30)
    
    # Logique du notebook (simplifi√©e)
    def notebook_extract_keywords(text, nlp, top_n=15):
        """Logique d'extraction du notebook"""
        if not text:
            return []
        doc = nlp(text)
        keywords = []
        for token in doc:
            lemma = token.lemma_.lower().strip()
            if (len(lemma) < 2 or
                token.is_punct or
                not lemma or
                token.is_stop or
                re.match(r'.*[@*/¬±&%#].*', lemma)):
                continue
            keywords.append(lemma)
        keyword_counts = Counter(keywords)
        return [word for word, count in keyword_counts.most_common(top_n)]
    
    # Logique de l'application cloud (simplifi√©e)
    def cloud_extract_keywords(text, nlp, top_n=15):
        """Logique d'extraction de l'application cloud"""
        if pd.isna(text) or text == '':
            return []
        
        # Nettoyage du texte (identique)
        text = clean_text(text)
        
        # Si spaCy n'est pas disponible, utiliser le fallback
        if nlp is None:
            return extract_keywords_fallback(text, top_n)
        
        try:
            doc = nlp(text)
        except Exception as e:
            return extract_keywords_fallback(text, top_n)
        
        keywords = []
        for token in doc:
            lemma = token.lemma_.lower().strip()
            if (len(lemma) < 2 or token.is_punct or not lemma or token.is_stop or
                token.text.isdigit() or
                re.match(r'^[\d.,]+$', token.text) or
                re.match(r'^[\d.,]+\s*[a-zA-Z%]+$', token.text) or
                re.match(r'^-[0-9]+$', token.text) or
                (re.match(r'^[A-Z0-9]+(?:[-_][A-Z0-9]+)*$', token.text, re.IGNORECASE) and
                 (re.search(r'\d', token.text) and re.search(r'[a-zA-Z]', token.text)) or
                 re.match(r'^[A-Z0-9]+$', token.text))):
                continue
            keywords.append(lemma)
        keyword_counts = Counter(keywords)
        return [word for word, count in keyword_counts.most_common(top_n)]
    
    def extract_keywords_fallback(text, top_n=15):
        """Fallback sans spaCy"""
        stopwords = {
            'a', 'an', 'and', 'are', 'as', 'at', 'be', 'by', 'for', 'from',
            'has', 'he', 'in', 'is', 'it', 'its', 'of', 'on', 'that', 'the',
            'to', 'was', 'will', 'with', 'this', 'these', 'they', 'them',
            'their', 'there', 'then', 'than', 'or', 'but', 'if', 'when',
            'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few',
            'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not',
            'only', 'own', 'same', 'so', 'than', 'too', 'very', 'can',
            'could', 'should', 'would', 'may', 'might', 'must', 'shall'
        }
        
        text = re.sub(r'[^\w\s]', ' ', text.lower())
        words = text.split()
        keywords = [word for word in words if len(word) > 2 and word not in stopwords]
        word_counts = Counter(keywords)
        return [word for word, count in word_counts.most_common(top_n)]
    
    def clean_text(text):
        """Nettoyage du texte (identique dans les deux versions)"""
        if not isinstance(text, str):
            return ""
        text = text.lower()
        all_patterns = [
            (r'\(', ' ( '),
            (r'\)', ' ) '),
            (r'\.', ' . '),
            (r'\!', ' ! '),
            (r'\?', ' ? '),
            (r'\:', ' : '),
            (r'\,', ', '),
            # Baby Care
            (r'\b(\d+)\s*[-~to]?\s*(\d+)\s*(m|mth|mths|month|months?)\b', 'month'),
            (r'\bnewborn\s*[-~to]?\s*(\d+)\s*(m|mth|months?)\b', 'month'),
            (r'\b(nb|newborn|baby|bb|bby|babie|babies)\b', 'baby'),
            (r'\b(diaper|diapr|nappy)\b', 'diaper'),
            (r'\b(stroller|pram|buggy)\b', 'stroller'),
            (r'\b(bpa\s*free|non\s*bpa)\b', 'bisphenol A free'),
            (r'\b(\d+)\s*(oz|ounce)\b', 'ounce'),
            # Computer Hardware
            (r'\b(rtx\s*\d+)\b', 'ray tracing graphics'),
            (r'\b(gtx\s*\d+)\b', 'geforce graphics'),
            (r'\bnvidia\b', 'nvidia'),
            (r'\b(amd\s*radeon\s*rx\s*\d+)\b', 'amd radeon graphics'),
            (r'\b(intel\s*(core|xeon)\s*[i\d-]+)\b', 'intel processor'),
            (r'\b(amd\s*ryzen\s*[\d]+)\b', 'amd ryzen processor'),
            (r'\bssd\b', 'solid state drive'),
            (r'\bhdd\b', 'hard disk drive'),
            (r'\bwifi\s*([0-9])\b', 'wi-fi standard'),
            (r'\bbluetooth\s*(\d\.\d)\b', 'bluetooth version'),
            (r'\bethernet\b', 'ethernet'),
            (r'\bfhd\b', 'full high definition'),
            (r'\buhd\b', 'ultra high definition'),
            (r'\bqhd\b', 'quad high definition'),
            (r'\boled\b', 'organic light emitting diode'),
            (r'\bips\b', 'in-plane switching'),
            (r'\bram\b', 'random access memory'),
            (r'\bcpu\b', 'central processing unit'),
            (r'\bgpu\b', 'graphics processing unit'),
            (r'\bhdmi\b', 'high definition multimedia interface'),
            (r'\busb\s*([a-z0-9]*)\b', 'universal serial bus'),
            (r'\brgb\b', 'red green blue'),
            # Home Appliances
            (r'\bfridge\b', 'refrigerator'),
            (r'\bwashing\s*machine\b', 'clothes washer'),
            (r'\bdishwasher\b', 'dish washing machine'),
            (r'\boven\b', 'cooking oven'),
            (r'\bmicrowave\b', 'microwave oven'),
            (r'\bhoover\b', 'vacuum cleaner'),
            (r'\btumble\s*dryer\b', 'clothes dryer'),
            (r'\b(a\+)\b', 'energy efficiency class'),
            (r'\b(\d+)\s*btu\b', 'british thermal unit'),
            # Textiles and Materials
            (r'\bpoly\b', 'polyester'),
            (r'\bacrylic\b', 'acrylic fiber'),
            (r'\bnylon\b', 'nylon fiber'),
            (r'\bspandex\b', 'spandex fiber'),
            (r'\blycra\b', 'lycra fiber'),
            (r'\bpvc\b', 'polyvinyl chloride'),
            (r'\bvinyl\b', 'vinyl material'),
            (r'\bstainless\s*steel\b', 'stainless steel'),
            (r'\baluminum\b', 'aluminum metal'),
            (r'\bplexiglass\b', 'acrylic glass'),
            (r'\bpu\s*leather\b', 'polyurethane leather'),
            (r'\bsynthetic\s*leather\b', 'synthetic leather'),
            (r'\bfaux\s*leather\b', 'faux leather'),
            (r'\bwaterproof\b', 'water resistant'),
            (r'\bbreathable\b', 'air permeable'),
            (r'\bwrinkle-free\b', 'wrinkle resistant'),
            # Beauty and Personal Care
            (r'\bSPF\b', 'Sun Protection Factor'),
            (r'\bUV\b', 'Ultraviolet'),
            (r'\bBB\s*cream\b', 'Blemish Balm cream'),
            (r'\bCC\s*cream\b', 'Color Correcting cream'),
            (r'\bHA\b', 'Hyaluronic Acid'),
            (r'\bAHA\b', 'Alpha Hydroxy Acid'),
            (r'\bBHA\b', 'Beta Hydroxy Acid'),
            (r'\bPHA\b', 'Polyhydroxy Acid'),
            (r'\bNMF\b', 'Natural Moisturizing Factor'),
            (r'\bEGF\b', 'Epidermal Growth Factor'),
            (r'\bVit\s*C\b', 'Vitamin C'),
            (r'\bVit\s*E\b', 'Vitamin E'),
            (r'\bVit\s*B3\b', 'Niacinamide Vitamin B3'),
            (r'\bVit\s*B5\b', 'Panthenol Vitamin B5'),
            (r'\bSOD\b', 'Superoxide Dismutase'),
            (r'\bQ10\b', 'Coenzyme Q10'),
            (r'\bFoam\s*cl\b', 'Foam cleanser'),
            (r'\bMic\s*H2O\b', 'Micellar Water'),
            (r'\bToner\b', 'Skin toner'),
            (r'\bEssence\b', 'Skin essence'),
            (r'\bAmpoule\b', 'Concentrated serum'),
            (r'\bCF\b', 'Cruelty Free'),
            (r'\bPF\b', 'Paraben Free'),
            (r'\bSF\b', 'Sulfate Free'),
            (r'\bGF\b', 'Gluten Free'),
            (r'\bHF\b', 'Hypoallergenic Formula'),
            (r'\bNT\b', 'Non-comedogenic Tested'),
            (r'\bAM\b', 'morning'),
            (r'\bPM\b', 'night'),
            (r'\bBID\b', 'twice daily'),
            (r'\bQD\b', 'once daily'),
            (r'\bAIR\b', 'Airless pump bottle'),
            (r'\bD-C\b', 'Dropper container'),
            (r'\bT-C\b', 'Tube container'),
            (r'\bPDO\b', 'Polydioxanone'),
            (r'\bPCL\b', 'Polycaprolactone'),
            (r'\bPLLA\b', 'Poly-L-lactic Acid'),
            (r'\bHIFU\b', 'High-Intensity Focused Ultrasound'),
            (r'\b(\d+)\s*fl\s*oz\b', 'fluid ounce'),
            (r'\bpH\s*bal\b', 'pH balanced'),
            # General Abbreviations and Units
            (r'\b(\d+)\s*gb\b', 'byte'),
            (r'\b(\d+)\s*tb\b', 'byte'),
            (r'\b(\d+)\s*mb\b', 'byte'),
            (r'\b(\d+)\s*go\b', 'byte'),
            (r'\b(\d+)\s*to\b', 'byte'),
            (r'\b(\d+)\s*mo\b', 'byte'),
            (r'\boctet\b', 'byte'),
            (r'\b(\d+)\s*y\b', 'year'),
            (r'\b(\d+)\s*mth\b', 'month'),
            (r'\b(\d+)\s*d\b', 'day'),
            (r'\b(\d+)\s*h\b', 'hour'),
            (r'\b(\d+)\s*min\b', 'minute'),
            (r'\b(\d+)\s*rpm\b', 'revolution per minute'),
            (r'\b(\d+)\s*mw\b', 'watt'),
            (r'\b(\d+)\s*cw\b', 'watt'),
            (r'\b(\d+)\s*kw\b', 'watt'),
            (r'\b(\d+)\s*ma\b', 'ampere'),
            (r'\b(\d+)\s*ca\b', 'ampere'),
            (r'\b(\d+)\s*ka\b', 'ampere'),
            (r'\b(\d+)\s*mv\b', 'volt'),
            (r'\b(\d+)\s*cv\b', 'volt'),
            (r'\b(\d+)\s*kv\b', 'volt'),
            (r'\b(\d+)\s*mm\b', 'meter'),
            (r'\b(\d+)\s*cm\b', 'meter'),
            (r'\b(\d+)\s*m\b', 'meter'),
            (r'\b(\d+)\s*km\b', 'meter'),
            (r'\binch\b', 'meter'),
            (r'\b(\d+)\s*ml\b', 'liter'),
            (r'\b(\d+)\s*cl\b', 'liter'),
            (r'\b(\d+)\s*dl\b', 'liter'),
            (r'\b(\d+)\s*l\b', 'liter'),
            (r'\b(\d+)\s*oz\b', 'liter'),
            (r'\b(\d+)\s*gal\b', 'liter'),
            (r'\bounce\b', 'liter'),
            (r'\bgallon\b', 'liter'),
            (r'\b(\d+)\s*mg\b', 'gram'),
            (r'\b(\d+)\s*cg\b', 'gram'),
            (r'\b(\d+)\s*dg\b', 'gram'),
            (r'\b(\d+)\s*g\b', 'gram'),
            (r'\b(\d+)\s*kg\b', 'gram'),
            (r'\b(\d+)\s*lb\b', 'gram'),
            (r'\bpound\b', 'gram'),
            (r'\b(\d+)\s*¬∞c\b', 'celsius'),
            (r'\b(\d+)\s*¬∞f\b', 'celcius'),
            (r'\bfahrenheit\b', 'celcius'),
            (r'\bflipkart\.com\b', ''),
            (r'\bapprox\.?\b', 'approximately'),
            (r'\bw/o\b', 'without'),
            (r'\bw/\b', 'with'),
            (r'\bant-\b', 'anti'),
            (r'\byes\b', ''),
            (r'\bno\b', ''),
            (r'\bna\b', ''),
            (r'\brs\.?\b', ''),
        ]
        for pattern, replacement in all_patterns:
            text = re.sub(pattern, replacement, text, flags=re.IGNORECASE)
        return text
    
    # Test avec un exemple de texte
    test_text = "Escort E-1700-906_Blk Analog Watch - For Men, Boys. Stainless steel case, water resistant, quartz movement, luminous hands"
    
    print(f"Texte de test: {test_text}")
    print(f"Texte nettoy√©: {clean_text(test_text)}")
    
    # Simuler l'extraction sans spaCy (mode cloud)
    cloud_keywords = extract_keywords_fallback(clean_text(test_text))
    print(f"Mots-cl√©s cloud (fallback): {cloud_keywords}")
    
    # 2. Diff√©rences dans la g√©n√©ration des heatmaps
    print("\nüî• 2. G√âN√âRATION DES HEATMAPS")
    print("-" * 30)
    
    print("NOTEBOOK:")
    print("- Utilise le mod√®le CLIP fine-tun√© r√©el")
    print("- Calcule les vraies similarit√©s entre patches d'image et mots-cl√©s")
    print("- G√©n√®re des heatmaps d'attention bas√©es sur les caract√©ristiques CLIP")
    print("- Utilise griddata pour lisser les heatmaps")
    print("- Superpose la heatmap sur l'image originale")
    
    print("\nAPPLICATION CLOUD:")
    print("- Utilise des heatmaps simul√©es (mode d√©monstration)")
    print("- G√©n√®re des patterns d'attention bas√©s sur des r√®gles simples")
    print("- Pour les montres: attention concentr√©e sur le centre")
    print("- Pour les ordinateurs: attention sur les bords")
    print("- Pour les autres: attention al√©atoire avec quelques zones d'int√©r√™t")
    
    # 3. Diff√©rences dans la pr√©diction
    print("\nüéØ 3. LOGIQUE DE PR√âDICTION")
    print("-" * 30)
    
    print("NOTEBOOK:")
    print("- Utilise le mod√®le CLIP fine-tun√© avec classification head")
    print("- Pr√©diction bas√©e sur les caract√©ristiques multimodales (image + texte)")
    print("- Scores de confiance bas√©s sur les logits du mod√®le")
    
    print("\nAPPLICATION CLOUD (mode d√©mo):")
    print("- Utilise des r√®gles bas√©es sur les mots-cl√©s")
    print("- Score bas√© sur le nombre de mots-cl√©s correspondants")
    print("- Bonus pour les mots-cl√©s sp√©cifiques")
    print("- Confiance am√©lior√©e si plusieurs mots-cl√©s correspondent")
    
    # 4. Recommandations pour aligner les r√©sultats
    print("\nüí° 4. RECOMMANDATIONS POUR ALIGNER LES R√âSULTATS")
    print("-" * 50)
    
    print("1. EXTRACTION DES MOTS-CL√âS:")
    print("   - Utiliser la m√™me logique de nettoyage du texte")
    print("   - Impl√©menter le m√™me fallback sans spaCy")
    print("   - Appliquer les m√™mes filtres de mots-cl√©s")
    
    print("\n2. G√âN√âRATION DES HEATMAPS:")
    print("   - D√©ployer le mod√®le CLIP fine-tun√© sur Azure ML")
    print("   - Impl√©menter la vraie logique d'attention CLIP")
    print("   - Utiliser les m√™mes param√®tres de griddata")
    
    print("\n3. PR√âDICTION:")
    print("   - Utiliser le mod√®le fine-tun√© au lieu des r√®gles")
    print("   - Impl√©menter la m√™me logique de classification")
    print("   - Calculer les vrais scores de confiance")
    
    print("\n4. D√âPLOIEMENT:")
    print("   - Cr√©er un endpoint Azure ML avec le mod√®le fine-tun√©")
    print("   - Impl√©menter la logique d'attention dans le script de score")
    print("   - Tester avec les m√™mes donn√©es d'entra√Ænement")
    
    return {
        'keyword_differences': {
            'notebook': 'Utilise spaCy avec lemmatisation',
            'cloud': 'Utilise fallback simple sans spaCy'
        },
        'heatmap_differences': {
            'notebook': 'Vraies heatmaps CLIP avec attention',
            'cloud': 'Heatmaps simul√©es bas√©es sur des r√®gles'
        },
        'prediction_differences': {
            'notebook': 'Mod√®le CLIP fine-tun√© avec classification',
            'cloud': 'R√®gles bas√©es sur les mots-cl√©s'
        }
    }

if __name__ == "__main__":
    results = analyze_notebook_vs_cloud()
    print("\n‚úÖ Analyse termin√©e!")
